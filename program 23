// program for class template in pair of values
#include <iostream>
#include <string>

// Class template for a Pair of values
template <typename T1, typename T2>
class Pair {
private:
    T1 first;
    T2 second;

public:
    // Constructor
    Pair(const T1& f, const T2& s) : first(f), second(s) {}

    // Getter methods
    T1 getFirst() const { return first; }
    T2 getSecond() const { return second; }

    // Setter methods
    void setFirst(const T1& f) { first = f; }
    void setSecond(const T2& s) { second = s; }

    // Display method
    void display() const {
        std::cout << "(" << first << ", " << second << ")";
    }

    // Overloaded operator to check equality
    bool operator==(const Pair<T1, T2>& other) const {
        return (first == other.first) && (second == other.second);
    }
};

int main() {
    // Creating instances of Pair with different data types
    Pair<int, double> pair1(10, 3.14);
    Pair<std::string, char> pair2("Hello", 'C');
    Pair<int, double> pair3(10, 3.14);

    // Displaying pairs
    std::cout << "Pair 1: ";
    pair1.display();
    std::cout << std::endl;

    std::cout << "Pair 2: ";
    pair2.display();
    std::cout << std::endl;

    // Checking equality of pairs
    std::cout << "Pair 1 and Pair 3 are " << (pair1 == pair3 ? "equal" : "not equal") << std::endl;

    return 0;
}
